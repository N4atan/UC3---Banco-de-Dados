CREATE DATABASE loja;
	USE loja;

	CREATE TABLE clientes (
		Id_cliente INT PRIMARY KEY,
		Nome VARCHAT(100),
		email VARCHAT(100)
	);

	CREATE TABLE pedidos (
		Id_pedidos INT PRIMARY KEY,
		descrição VARCHAR(200),
		valor DECIMAL(10, 2),
		Id_cliente INT,
		FOREGER KEY (id_cliente) REFERENCES clientes(id_clientes)
	);

	
	INSERT INTO clientes (id_clientes, nome, email) VALUES
	(1, ‘Natan Gabriel Wildner da Silva’, ‘gabrielnathan2912@gmail.com’),
	(2, ‘Lindseu Isadora Nogueira Correa’, ‘lindseyisadora86@gmail.com’),
	(3, ‘Gabriela Wildner da Silva’, ‘Não tem’);

	INSERT INTO pedidos (id_pedidos, descricao, valor, id_clientes) VALUES
	(101, ‘Compra de Movéis’, 1500.00, 1),
	(102, ‘Pedidos de eletrônicos’, 2500.50, 2),
	(103, ‘Serviços de instalação’, 500.00, 3);

Podemos usar IGNORE após INSERT para ignorar um que já existe
		
							28/06/2024
RENAME TABLE tabela1 TO tabela1.1		--> Alterar nome de tabela

ALTER TABLE tabela1.1		
CHANGE nome nomes VARCHAR(100);			--> Alterar nome de coluna

ALTER TABLE tabela1.1				--> Adicionar tabela
ADD COLUMN telefone VARCHAR(15);

UPDATE nomeTabela				--> Atualizando a coluna nova que criamos, WHERE seria o 'local', onde tal item estiver vai setar o telefone no caso do exemp
SET nomeColuna = x
WHERE condição

na criação de uma nova tabela podemos botar na primary key: PRIMARY KEY AUTO_INCREMENT


--BUSCA
SELECT colunas, da, tabela
    FROM tabela

SELECT * --Seleciona automaticamente todas
    FROM tabala

SELECT colunaqueesta o item
    FROM tabela
    WHERE linhadele

--Pegar varios
SELECT colunadoitem
    FROM tabela
    WHERE locdele IN (X,X,X)

SELECT *
    FROM tabela
    ORDER BY algumaColuna ASC --ou DESC

SELECT *
    FROM tabela
    WHERE algumaColuna
    ORDER BY algumaColuna ASC --ou DESC

SELECT *
    FROM tabela
    LIMIT 3 --limita a quantidade de itens de busca

SELECT DISTINCT item --Nao vai repitir os itens por conta do DISTINCT
    FROM tabela

--Contar valor total de pedidos
SELECT COUNT(*) FROM Pedidos

--Soma do valor total
SELECT SUM(ValorTotal) AS valor_total_pedidos FROM Pedidos

--Valor medio
SELECT AVG(ValorTotal) AS valor_medio_pedidos FROM Pedidos 

--Esse AS serve para estética, para o resultado aparecer como coluna com tal nome.

--Pedido com maior valor
SELECT MAX(NumeroPedido) AS pedido_maior_valor FROM Pedidos
SELECT MIN(NumeroPedido) AS pedido_maior_valor FROM Pedidos

--Pegar o dados de uma tabela e outra e juntar-los.
SELECT CLIENTES.ID_Cliente, CLIENTES.Nome, CLIENTES.email, Pedidos.NumeroPedido
	FROM CLIENTES
	INNER JOIN Pedidos ON CLIENTES.ID_Cliente = Pedidos.id_Cliente

--Seleciona todos os clientes, mesmo que nao tenha pedidos relacionados ao id dele.
SELECT CLIENTES.ID_Cliente, CLIENTES.Nome, CLIENTES.email, Pedidos.NumeroPedido
	FROM CLIENTES
	LEFT JOIN Pedidos ON CLIENTES.ID_Cliente = Pedidos.id_Cliente


--Consulta de junção com condição
USE tdssl241n_natangabrielwildnerdasilva;
SELECT CLIENTES.ID_Cliente, CLIENTES.Nome, CLIENTES.email, Pedidos.NumeroPedido, Pedidos.ValorTotal
	FROM CLIENTES
	INNER JOIN Pedidos ON CLIENTES.ID_Cliente = Pedidos.id_Cliente
	WHERE Pedidos.ValorTotal > 200;

--Exemplo de somar total de pedidos e oclocar e o respectivo clientes
USE tdssl241n_natangabrielwildnerdasilva;

SELECT CLIENTES.Nome, COUNT(Pedidos.ID_Pedido) AS total_pedidos
FROM CLIENTES INNER JOIN Pedidos ON CLIENTES.ID_Cliente = Pedidos.id_Cliente
GROUP BY CLIENTES.Nome

--Pedido do sor
USE tdssl241n_natangabrielwildnerdasilva;

SELECT CLIENTES.Nome, COUNT(Pedidos.ID_Pedido) AS total_pedidos, SUM(Pedidos.ValorTotal) AS valortotal_gasto
FROM CLIENTES INNER JOIN Pedidos ON CLIENTES.ID_Cliente = Pedidos.id_Cliente
GROUP BY CLIENTES.Nome